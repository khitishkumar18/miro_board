1] app folder will consist of all the main files also the routes through which will do the server side rendering.

2] components folder will include all the re-usable components we need for, through shad-cn library.

ROUTING IN NEXT-JS :-
------------------
3] if we create any folder inside app folder it becomes a route, any .jsx,.js,.tsx inside it becomes a route.
const Page = () => {
    return ( 
        <div>
            Hello Test Page!
        </div>
     );
}
if we have to make route we have to use export default Component_Name
export default Page;
The URL will be the folder name inside app:-
localhost:3000/test
localhost:3000/test/subroute

4]  Grouping Routes Without Affecting Routing ((folder)):

Purpose: This approach allows you to logically organize related routes within a folder while maintaining clean URLs that don't include the folder name.
Syntax: Enclose the folder name in parentheses: (folder).
Example:
pages/
  (dashboard)/  // Grouped routes
    - index.js   // Route: / (home page, assuming a default index page)
    - profile.js // Route: /profile (nested route within the group)
  blog/
    [slug].js    // Dynamic route: /blog/post-1, /blog/post-2, etc.
Explanation:
The dashboard folder groups index.js and profile.js.
The actual routes rendered would be:
/ (home page)
/profile

5] Excluding Folder and Child Segments from Routing (_folder):

Purpose: This approach ensures that a folder and all its contents (subfolders and files) are not considered as part of the application's routing mechanism.
Syntax: Prefix the folder name with an underscore: _folder.
Example:
_components/  // Excluded from routing
  - Header.js
  - Footer.js
utils/        // Excluded from routing
  - fetchData.js

pages/
  index.js    // Route: / (home page)

@Group Routes: When you have components defining multiple related routes, use (folder).
@Exclude Folders: If you have utility code or data that shouldn't be web pages, use _folder.

6] Convex and Clerk for Backend and Authorization :-
npm install convex -> install the convex package which provides a convenient interface for working with Convex from a React app

npx convex dev -> prompt you to log in with GitHub, create a project, and save your production and deployment URLs.

It will also create a convex/ folder for you to write your backend API functions in. The dev command will then continue running to sync your functions with your dev deployment in the cloud.

@run npm run dev and npx convex dev side-by-side

npm install @clerk/nextjs -> Clerk's Next.js SDK has prebuilt components, React hooks, and helpers to make user authentication easier.

